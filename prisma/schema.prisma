// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  grade         Int?      // For students: 6-12
  school        String?   // School name
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  journalEntries JournalEntry[]
  monsters      Monster[]
  quests        Quest[]
  therapySessions TherapySession[]

  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Journal Entry model
model JournalEntry {
  id        String   @id @default(cuid())
  content   String   @db.Text
  mood      String?  // Stored mood at time of entry
  aiResponse String? @db.Text // AI's response to the entry
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]    @relation("JournalEntryTags")

  @@map("journal_entries")
}

// Tag model for journal entries
model Tag {
  id            String   @id @default(cuid())
  name          String   @unique
  createdAt     DateTime @default(now())
  journalEntries JournalEntry[] @relation("JournalEntryTags")

  @@map("tags")
}

// Monster model (for "Hình dáng tôi" feature)
model Monster {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  imageUrl    String?
  emotion     String   // The emotion this monster represents
  tamedLevel  Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("monsters")
}

// Quest model (for "Wellbeing Quests")
model Quest {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  type        QuestType
  difficulty  Int      // 1-5
  xpReward    Int      // Experience points reward
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quests")
}

// Therapy Session model
model TherapySession {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  status      SessionStatus @default(SCHEDULED)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  therapistId String

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  therapist   Therapist @relation(fields: [therapistId], references: [id])

  @@map("therapy_sessions")
}

// Therapist model
model Therapist {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  specialization String[]
  bio           String?  @db.Text
  availability  Json?    // Stored as JSON
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions      TherapySession[]

  @@map("therapists")
}

// Enums
enum UserRole {
  STUDENT
  THERAPIST
  ADMIN
}

enum QuestType {
  DAILY
  WEEKLY
  MONTHLY
  SPECIAL
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
} 